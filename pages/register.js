import {
  Alert, AlertIcon, Box, Button, Center, Flex, Heading, Image, Input, InputGroup,
  InputLeftElement, InputRightElement, Stack, useToast
} from '@chakra-ui/react';
import axios from 'axios';
import Head from "next/head";
import { useRouter } from 'next/router';
import React, { useState } from 'react';
import { AiFillIdcard, AiTwotoneCalendar } from "react-icons/ai";
import { BsFillTelephoneFill } from "react-icons/bs";
import { FaUser } from "react-icons/fa";
import { RiLockPasswordFill } from "react-icons/ri";
import Colour from "../color/napalearncolor";
import url from './url';

export default function Home() {
  let bgColor = {
    width: '100%',
    height: '100%',
    bgColor: Colour.Darkblue,
  }
  let boxText = {
    width: '100%',
    marginButtom: '24px',
  }
  let boxLogin = {
    width: '100%',
    marginTop: '60px'
  }
  let boxButton = {
    width: '100%',
    marginTop: '36px',
    bgColor: Colour.Fi
  }
  let container = {
    width: '900px',
    padding: '90px',
  }

  const [show, setShow] = React.useState(false)
  const handleClick = () => setShow(!show)

  const [show1, setShow1] = React.useState(false)
  const handleClick1 = () => setShow1(!show1)

  const [form, setForm] = useState(
    {
      firstname: "", lastname: "", id: "", username: "", password: "", confirmpassword: "",
      dob: "", telephone: ""
    })
  const [wrong, setWrong] = useState(false)
  const checkCID = ''
  const [wrongWord, setWrongWord] = useState('')
  const toast = useToast()
  const router = useRouter()

  const checkCitizen = () => {
    let regExp = /^[0-9]+$/g
    let result = regExp.test(form.id)
    let cid = form.id
    console.log('citizen' + result)

    if (result && cid.length === 13) {
      let check = parseInt(cid[0]) * 13 + parseInt(cid[1]) * 12 + parseInt(cid[2]) * 11 +
        parseInt(cid[3]) * 10 + parseInt(cid[4]) * 9 + parseInt(cid[5]) * 8 +
        parseInt(cid[6]) * 7 + parseInt(cid[7]) * 6 + parseInt(cid[8]) * 5 +
        parseInt(cid[9]) * 4 + parseInt(cid[10]) * 3 + parseInt(cid[11]) * 2
      let checkDigit = check % 11
      if (11 - checkDigit === parseInt(cid[12])) // Correct 13
      {
        checkCID = 'false'
        console.log('correct')
      }
      else // Incorrect 13
      {
        checkCID = 'true'
      }
    }
    else // Incorrect + Wrong format
    {
      checkCID = 'true'
    }
  }

  const onSummitClick = async () => {
    console.log('summit clicked!')
    if (form.firstname && form.lastname && form.id && form.username &&
      form.password && form.confirmpassword && form.dob && form.telephone) {
      checkCitizen(form.id)
      if (checkCID == 'true') {
        setWrong(true)
        setWrongWord('ID number is incorrect')
      }
      else if (form.password != form.confirmpassword) {
        setWrong(true)
        setWrongWord('Please enter the same password')
      }
      else {
        let result = await axios.post(`${url}/api/Register/checkUser`, {
          username: form.username
        })
        let result1 = await axios.post(`${url}/api/Register/checkID`, {
          id: form.id
        })
        if (result1.data.id != null) {
          setWrong(true)
          setWrongWord('You have already registered')
        }
        else if (result.data.username != null) {
          {
            setWrong(true)
            setWrongWord('Username is already in use')
          }
        }
        else if (result1.data.id == null && result.data.username == null) {
          setWrong(false)
          axios.post(`${url}/api/Register/addUser`, form,)
            .then(res => {
              console.log(res)
            })
            .catch(err => {
              console.log(err)
            })
          toast({
            title: 'Success submit',
            description: "Registration is complete",
            status: 'success',
            duration: 3000,
            isClosable: false,
          })
          setTimeout(() => {
            router.push('/')
          }, 3000)
        }
      }
    }
    else {
      setWrong(true)
      setWrongWord('Please complete all fields')
    }
  }
  console.log(form)
  const isError = form === ''

  return (
    <div className="h-auto min-h-screen bg-header">
      <Head>
        <title>Nap A Learn Website</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/pro.ico" />
      </Head>

      <Box sx={bgColor} >
        <Flex align="center" justify="center">
          <Box sx={container}>
            <Center>
              <Image
                src='/Iconnal.png'
                alt="Picture"
                width={500}
                height={400}
                align='center'
              />
            </Center>
            <Box sx={boxText} align="center" justify="center" >
              <Heading as='h3' size='lg' color='white'>
                Create new account
              </Heading>
            </Box>

            <Box sx={boxLogin} align="center" justify="center" >
              <Stack spacing={6}>
                <Flex gap={6}>
                  <InputGroup size='md'>
                    <InputLeftElement pointerEvents='none' children={<FaUser size={20} color="white" />} />
                    <Input placeholder='Firstname' _placeholder={{ opacity: 0.8, color: 'white' }}
                      focusBorderColor={Colour.FirstPink} color="white" colorScheme="white"
                      value={form.firstname} onChange={(e) => setForm({ ...form, firstname: e.target.value })} />
                  </InputGroup>
                  <InputGroup size='md'>
                    <InputLeftElement pointerEvents='none' children={<FaUser size={20} color="white" />} />
                    <Input placeholder='Lastname' _placeholder={{ opacity: 0.8, color: 'white' }}
                      focusBorderColor={Colour.FirstPink} color="white" colorScheme="white"
                      value={form.lastname} onChange={(e) => setForm({ ...form, lastname: e.target.value })} />
                  </InputGroup>
                </Flex>
                <InputGroup size='md'>
                  <InputLeftElement pointerEvents='none' children={<AiFillIdcard size={20} color="white" />} />
                  <Input placeholder='ID' _placeholder={{ opacity: 0.8, color: 'white' }}
                    focusBorderColor={Colour.FirstPink} color="white" colorScheme="white"
                    value={form.id} onChange={(e) => setForm({ ...form, id: e.target.value })} />
                </InputGroup>
                <InputGroup size='md'>
                  <InputLeftElement pointerEvents='none' children={<FaUser size={20} color="white" />} />
                  <Input placeholder='Username' _placeholder={{ opacity: 0.8, color: 'white' }}
                    focusBorderColor={Colour.FirstPink} color="white" colorScheme="white"
                    value={form.username} onChange={(e) => setForm({ ...form, username: e.target.value })} />
                </InputGroup>
                <InputGroup size='md'>
                  <InputLeftElement pointerEvents='none' children={<RiLockPasswordFill size={20} color="white" />} />
                  <Input
                    pr='4.5rem'
                    type={show ? 'text' : 'password'}
                    placeholder='Password'
                    _placeholder={{ opacity: 0.8, color: 'white' }}
                    focusBorderColor={Colour.FirstPink}
                    colorScheme="white"
                    color="white"
                    value={form.password} onChange={(e) => setForm({ ...form, password: e.target.value })}
                  />
                  <InputRightElement width='4.5rem'>
                    <Button h='1.75rem' size='sm' onClick={handleClick}>
                      {show ? 'Hide' : 'Show'}
                    </Button>
                  </InputRightElement>
                </InputGroup>
                <InputGroup size='md'>
                  <InputLeftElement pointerEvents='none' children={<RiLockPasswordFill size={20} color="white" />} />
                  <Input
                    pr='4.5rem'
                    type={show1 ? 'text' : 'password'}
                    placeholder='Confirm Password'
                    _placeholder={{ opacity: 0.8, color: 'white' }}
                    focusBorderColor={Colour.FirstPink}
                    colorScheme="white"
                    color="white"
                    value={form.confirmpassword} onChange={(e) => setForm({ ...form, confirmpassword: e.target.value })}
                  />
                  <InputRightElement width='4.5rem'>
                    <Button h='1.75rem' size='sm' onClick={handleClick1}>
                      {show1 ? 'Hide' : 'Show'}
                    </Button>
                  </InputRightElement>
                </InputGroup>
                <Flex gap={6}>
                  <InputGroup size='md'>
                    <InputLeftElement pointerEvents='none' children={<AiTwotoneCalendar size={20} color="white" />} />
                    <Input
                      placeholder="Select Date of Birth"
                      color="white"
                      size="md"
                      type="date"
                      _placeholder={{ opacity: 0.8, color: 'white' }} focusBorderColor={Colour.FirstPink} colorScheme="white"
                      value={form.dob} onChange={(e) => setForm({ ...form, dob: e.target.value })}
                    />
                  </InputGroup>
                  <InputGroup size='md'>
                    <InputLeftElement pointerEvents='none' children={<BsFillTelephoneFill size={20} color="white" />} />
                    <Input placeholder='Telephone' _placeholder={{ opacity: 0.8, color: 'white' }}
                      focusBorderColor={Colour.FirstPink} color="white" colorScheme="white"
                      value={form.telephone} onChange={(e) => setForm({ ...form, telephone: e.target.value })} />
                  </InputGroup>
                </Flex>
              </Stack>
            </Box>
            <Box sx={boxButton}>
              {/* <NextLink href="/login" passHref> */}
              <Button width='100%' borderRadius='md' bg={Colour.FirstPink} color='White' size='lg'
                _hover={{
                  bg: 'White',
                  border: '2px solid',
                  color: Colour.FirstPink
                }}
                onClick={() => onSummitClick()}>
                Create account
              </Button>
              {/* </NextLink> */}
            </Box>
            {
              (wrong) ?
                <Alert status='error'
                  bg='none'
                  color='red'
                  position='absolute'
                  align='center'
                >
                  <AlertIcon />
                  {wrongWord}
                </Alert>
                : null
            }
          </Box>
        </Flex>
      </Box>

    </div>
  );
}